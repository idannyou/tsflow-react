{"version":3,"sources":["InputClasses.js","webcam.js","machineLearning.js","MainScreen.js","controllerDataset.js","App.js","serviceWorker.js","index.js"],"names":["FixedBox","props","margin","style","width","children","InputClasses","disableButton","Boolean","appState","classOne","classTwo","alignItems","justifyContent","direction","H2","placeholder","onChange","e","setClassOne","target","value","setClassTwo","disabled","onClick","setFinishInputClasses","loadTruncatedMobileNet","a","tf","mobilenet","layer","getLayer","inputs","outputs","output","loadWebcam","videoRef","tfd","webcam","console","error","truncatedMobileNet","capture","screenShot","predict","expandDims","dispose","getImage","img","processedImg","toFloat","div","sub","draw","image","canvas","ctx","getContext","imageData","ImageData","data","dataSync","i","height","j","putImageData","train","controllerDataset","setTrainStatus","xs","Error","model","layers","flatten","inputShape","shape","slice","dense","units","activation","kernelInitializer","useBias","optimizer","adam","compile","loss","batchSize","Math","floor","fit","ys","epochs","callbacks","onBatchEnd","_","logs","toFixed","webcamRef","truncatedMobileNetRef","modelRef","current","embeddings","predictions","predictedClass","as1D","argMax","classId","useLongPress","callback","ms","React","useState","startLongPress","setStartLongPress","useEffect","timerId","setTimeout","clearTimeout","onMouseDown","onMouseUp","onMouseLeave","onTouchStart","onTouchEnd","Controls","handleLongPressOne","classOneCanvasRef","setClassOneSamples","classOneSamples","controllerDatasetRef","addExample","handleLongPressTwo","classTwoCanvasRef","setClassTwoSamples","classTwoSamples","predictMode","setPredictMode","count","setCount","setPredictedClass","canPredict","setCanPredict","handleTrain","arg","log","timer","size","H3","color","SampleCanvas","ref","MainScreen","loadedWebcam","initWebcam","autoPlay","playsInline","muted","ControllerDataset","numClasses","this","example","label","y","toInt","oldX","concat","oldY","App","finishInputClasses","useRef","useAppState","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96f059ff.chunk.js","sourcesContent":["import React from 'react';\nimport { Box, Button, Header, Flex, Input } from '@procore/core-react';\n\nfunction FixedBox(props) {\n  return (\n    <Box margin=\"lg\" style={{ width: '300px' }}>\n      {props.children}\n    </Box>\n  );\n}\n\nfunction InputClasses(props) {\n  const disableButton = Boolean(\n    !(props.appState.classOne && props.appState.classTwo)\n  );\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"center\" direction={'column'}>\n      <FixedBox>\n        <Header.H2>Class One:</Header.H2>\n        <Input\n          placeholder=\"Input your first class (ex: Wearing hat)\"\n          onChange={e => props.appState.setClassOne(e.target.value)}\n          value={props.appState.classOne}\n        />\n      </FixedBox>\n      <FixedBox>\n        <Header.H2>Class Two:</Header.H2>\n        <Input\n          placeholder=\"Input your second class (ex: Not wearing hat)\"\n          onChange={e => props.appState.setClassTwo(e.target.value)}\n          value={props.appState.classTwo}\n        />\n      </FixedBox>\n      <Box margin=\"lg\">\n        <Button\n          disabled={disableButton}\n          onClick={() => props.appState.setFinishInputClasses(true)}\n        >\n          Submit\n        </Button>\n      </Box>\n    </Flex>\n  );\n}\n\nexport default InputClasses;\n","import * as tf from '@tensorflow/tfjs';\nimport * as tfd from '@tensorflow/tfjs-data';\n\nexport async function loadTruncatedMobileNet() {\n  const mobilenet = await tf.loadLayersModel(\n    'https://storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_0.25_224/model.json'\n  );\n\n  const layer = mobilenet.getLayer('conv_pw_13_relu');\n  return tf.model({ inputs: mobilenet.inputs, outputs: layer.output });\n}\n\nexport async function loadWebcam(videoRef) {\n  if (!videoRef) return;\n  let webcam, truncatedMobileNet;\n  try {\n    webcam = await tfd.webcam(videoRef);\n  } catch (e) {\n    console.error(e);\n  }\n  truncatedMobileNet = await loadTruncatedMobileNet();\n  const screenShot = await webcam.capture();\n  truncatedMobileNet.predict(screenShot.expandDims(0));\n  screenShot.dispose();\n  return { webcam, truncatedMobileNet };\n}\n\nexport async function getImage(webcam) {\n  const img = await webcam.capture();\n  const processedImg = tf.tidy(() =>\n    img\n      .expandDims(0)\n      .toFloat()\n      .div(127)\n      .sub(1)\n  );\n  img.dispose();\n  return processedImg;\n}\n\nexport function draw(image, canvas) {\n  const [width, height] = [224, 224];\n  const ctx = canvas.getContext('2d');\n  const imageData = new ImageData(width, height);\n  const data = image.dataSync();\n  for (let i = 0; i < height * width; ++i) {\n    const j = i * 4;\n    imageData.data[j + 0] = (data[i * 3 + 0] + 1) * 127;\n    imageData.data[j + 1] = (data[i * 3 + 1] + 1) * 127;\n    imageData.data[j + 2] = (data[i * 3 + 2] + 1) * 127;\n    imageData.data[j + 3] = 255;\n  }\n  ctx.putImageData(imageData, 0, 0);\n}\n","import * as tf from '@tensorflow/tfjs';\n\nimport { getImage } from './webcam';\n\nexport async function train(\n  controllerDataset,\n  truncatedMobileNet,\n  setTrainStatus\n) {\n  if (controllerDataset.xs == null) {\n    throw new Error('Add some examples before training!');\n  }\n\n  let model = tf.sequential({\n    layers: [\n      tf.layers.flatten({\n        inputShape: truncatedMobileNet.outputs[0].shape.slice(1)\n      }),\n      tf.layers.dense({\n        units: 100,\n        activation: 'relu',\n        kernelInitializer: 'varianceScaling',\n        useBias: true\n      }),\n      tf.layers.dense({\n        units: 2,\n        kernelInitializer: 'varianceScaling',\n        useBias: false,\n        activation: 'softmax'\n      })\n    ]\n  });\n\n  const optimizer = tf.train.adam(0.0001);\n  model.compile({ optimizer: optimizer, loss: 'categoricalCrossentropy' });\n\n  const batchSize = Math.floor(controllerDataset.xs.shape[0] * 0.4);\n  if (!(batchSize > 0)) {\n    throw new Error(\n      `Batch size is 0 or NaN. Please choose a non-zero fraction.`\n    );\n  }\n\n  await model.fit(controllerDataset.xs, controllerDataset.ys, {\n    batchSize,\n    epochs: 20,\n    callbacks: {\n      onBatchEnd: async (_, logs) => {\n        setTrainStatus('Loss: ' + logs.loss.toFixed(5));\n      }\n    }\n  });\n\n  return model;\n}\n\nexport async function predict(webcamRef, truncatedMobileNetRef, modelRef) {\n  const img = await getImage(webcamRef.current);\n  const embeddings = truncatedMobileNetRef.current.predict(img);\n  const predictions = modelRef.current.predict(embeddings);\n  const predictedClass = predictions.as1D().argMax();\n  const classId = (await predictedClass.data())[0];\n  img.dispose();\n  await tf.nextFrame();\n  return classId;\n}\n","import React from 'react';\nimport {\n  Box,\n  Button,\n  Card,\n  Font,\n  Header,\n  Flex,\n  FlexList\n} from '@procore/core-react';\n\nimport { train, predict } from './machineLearning';\nimport { draw, loadWebcam, getImage } from './webcam';\n\nfunction useLongPress(callback = () => {}, ms = 10) {\n  const [startLongPress, setStartLongPress] = React.useState(false);\n\n  React.useEffect(() => {\n    let timerId;\n    if (startLongPress) {\n      timerId = setTimeout(callback, ms);\n    } else {\n      clearTimeout(timerId);\n    }\n\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [startLongPress, ms, callback]);\n\n  return {\n    onMouseDown: () => setStartLongPress(true),\n    onMouseUp: () => setStartLongPress(false),\n    onMouseLeave: () => setStartLongPress(false),\n    onTouchStart: () => setStartLongPress(true),\n    onTouchEnd: () => setStartLongPress(false)\n  };\n}\n\nfunction Controls(props) {\n  const handleLongPressOne = useLongPress(async () => {\n    let img = await getImage(props.appState.webcamRef.current);\n    draw(img, props.appState.classOneCanvasRef.current);\n    props.appState.setClassOneSamples(props.appState.classOneSamples + 1);\n    props.appState.controllerDatasetRef.current.addExample(\n      props.appState.truncatedMobileNetRef.current.predict(img),\n      0\n    );\n\n    img.dispose();\n  });\n\n  const handleLongPressTwo = useLongPress(async () => {\n    let img = await getImage(props.appState.webcamRef.current);\n    draw(img, props.appState.classTwoCanvasRef.current);\n    props.appState.setClassTwoSamples(props.appState.classTwoSamples + 1);\n    props.appState.controllerDatasetRef.current.addExample(\n      props.appState.truncatedMobileNetRef.current.predict(img),\n      1\n    );\n    img.dispose();\n  });\n\n  const [predictMode, setPredictMode] = React.useState(false);\n  const [count, setCount] = React.useState(0);\n  const [predictedClass, setPredictedClass] = React.useState(null);\n  const [canPredict, setCanPredict] = React.useState(false);\n\n  const handleTrain = async () => {\n    props.appState.modelRef.current = await train(\n      props.appState.controllerDatasetRef.current,\n      props.appState.truncatedMobileNetRef.current,\n      arg => console.log(arg)\n    );\n    setPredictMode(false);\n    setCanPredict(true);\n  };\n\n  const handlePredict = () => {\n    if (predictMode) {\n      setPredictedClass(null);\n    }\n    setPredictMode(!predictMode);\n  };\n\n  React.useEffect(() => {\n    let timer;\n\n    if (predictMode) {\n      timer = setTimeout(async () => {\n        const classId = await predict(\n          props.appState.webcamRef,\n          props.appState.truncatedMobileNetRef,\n          props.appState.modelRef\n        );\n        setCount(count + 1);\n        setPredictedClass(classId);\n      }, 100);\n    } else {\n      clearTimeout(timer);\n    }\n    return () => {\n      clearTimeout(timer);\n    };\n  });\n\n  return (\n    <Box margin=\"md\">\n      <Box margin=\"md\">\n        <FlexList size=\"lg\" justifyContent=\"center\">\n          <Button\n            disabled={props.appState.controllerDatasetRef.current.xs == null}\n            onClick={handleTrain}\n            style={{ width: '125px' }}\n          >\n            Train\n          </Button>\n          <Button\n            disabled={!canPredict}\n            onClick={handlePredict}\n            style={{ width: '125px' }}\n          >\n            {predictMode ? 'Stop Predicting' : 'Predict'}\n          </Button>\n        </FlexList>\n      </Box>\n      <FlexList size=\"lg\" justifyContent=\"center\">\n        <Flex direction=\"column\" alignItems=\"center\">\n          <Header.H3\n            style={{\n              color:\n                predictedClass === null\n                  ? 'black'\n                  : predictedClass === 0\n                  ? 'green'\n                  : 'red'\n            }}\n          >\n            {props.appState.classOne}\n          </Header.H3>\n          <Button style={{ width: '125px' }} {...handleLongPressOne}>\n            Add Sample\n          </Button>\n        </Flex>\n        <Flex direction=\"column\" alignItems=\"center\">\n          <Header.H3\n            style={{\n              color:\n                predictedClass === null\n                  ? 'black'\n                  : predictedClass === 1\n                  ? 'green'\n                  : 'red'\n            }}\n          >\n            {props.appState.classTwo}\n          </Header.H3>\n          <Button style={{ width: '125px' }} {...handleLongPressTwo}>\n            Add Sample\n          </Button>\n        </Flex>\n      </FlexList>\n    </Box>\n  );\n}\n\nfunction SampleCanvas(props) {\n  return (\n    <FlexList>\n      <Box margin=\"sm\">\n        <FlexList direction=\"column\">\n          <canvas\n            ref={props.appState.classOneCanvasRef}\n            width=\"224\"\n            height=\"224\"\n            style={{ width: '150px' }}\n          ></canvas>\n          <Font>{`Samples: ${props.appState.classOneSamples}`}</Font>\n        </FlexList>\n      </Box>\n      <Box margin=\"sm\">\n        <FlexList direction=\"column\">\n          <canvas\n            ref={props.appState.classTwoCanvasRef}\n            width=\"224\"\n            height=\"224\"\n            style={{ width: '150px' }}\n          ></canvas>\n          <Font>{`Samples: ${props.appState.classTwoSamples}`}</Font>\n        </FlexList>\n      </Box>\n    </FlexList>\n  );\n}\n\nfunction MainScreen(props) {\n  React.useEffect(() => {\n    async function initWebcam() {\n      const loadedWebcam = await loadWebcam(props.appState.videoRef.current);\n      props.appState.webcamRef.current = loadedWebcam.webcam;\n      props.appState.truncatedMobileNetRef.current =\n        loadedWebcam.truncatedMobileNet;\n    }\n    initWebcam();\n  }, [\n    props.appState.webcamRef,\n    props.appState.videoRef,\n    props.appState.truncatedMobileNetRef\n  ]);\n  return (\n    <Flex direction={'column'} alignItems=\"center\">\n      <Box margin=\"md\">\n        <Card>\n          <Box margin=\"md\">\n            <video\n              ref={props.appState.videoRef}\n              autoPlay\n              playsInline\n              muted\n              width=\"224\"\n              height=\"224\"\n            ></video>\n          </Box>\n        </Card>\n      </Box>\n      <Card>\n        <Controls {...props} />\n      </Card>\n      <SampleCanvas {...props} />\n    </Flex>\n  );\n}\n\nexport default MainScreen;\n","import * as tf from '@tensorflow/tfjs';\n\nexport class ControllerDataset {\n  constructor(numClasses) {\n    this.numClasses = numClasses;\n  }\n\n  addExample(example, label) {\n    const y = tf.tidy(() =>\n      tf.oneHot(tf.tensor1d([label]).toInt(), this.numClasses)\n    );\n    if (this.xs == null) {\n      this.xs = tf.keep(example);\n      this.ys = tf.keep(y);\n    } else {\n      const oldX = this.xs;\n      this.xs = tf.keep(oldX.concat(example, 0));\n\n      const oldY = this.ys;\n      this.ys = tf.keep(oldY.concat(y, 0));\n\n      oldX.dispose();\n      oldY.dispose();\n      y.dispose();\n    }\n  }\n}\n","import React from 'react';\nimport { Card, Flex } from '@procore/core-react';\n\nimport InputClasses from './InputClasses';\nimport MainScreen from './MainScreen';\nimport { ControllerDataset } from './controllerDataset';\n\nfunction useAppState() {\n  const [classOne, setClassOne] = React.useState('');\n  const [classTwo, setClassTwo] = React.useState('');\n  const [classOneSamples, setClassOneSamples] = React.useState(0);\n  const [classTwoSamples, setClassTwoSamples] = React.useState(0);\n\n  const [finishInputClasses, setFinishInputClasses] = React.useState(false);\n\n  //webcam , model, and mobile net\n  const videoRef = React.useRef();\n  const truncatedMobileNetRef = React.useRef();\n  const webcamRef = React.useRef();\n  const controllerDatasetRef = React.useRef(new ControllerDataset(2));\n  const modelRef = React.useRef;\n\n  //canvas refs\n  const classOneCanvasRef = React.useRef();\n  const classTwoCanvasRef = React.useRef();\n\n  return {\n    classOne,\n    setClassOne,\n    classTwo,\n    setClassTwo,\n    classOneSamples,\n    setClassOneSamples,\n    classTwoSamples,\n    setClassTwoSamples,\n    finishInputClasses,\n    setFinishInputClasses,\n    videoRef,\n    truncatedMobileNetRef,\n    webcamRef,\n    classOneCanvasRef,\n    classTwoCanvasRef,\n    controllerDatasetRef,\n    modelRef\n  };\n}\n\nfunction App() {\n  const appState = useAppState();\n\n  window.appState = appState;\n\n  return (\n    <Flex direction=\"column\" alignItems=\"center\">\n      <Card style={{ width: '370px', height: '600px' }}>\n        {appState.finishInputClasses ? (\n          <MainScreen appState={appState} />\n        ) : (\n          <InputClasses appState={appState} />\n        )}\n      </Card>\n    </Flex>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}